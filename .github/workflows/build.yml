name: Build-and-Test

on:
  push:
    paths-ignore:
      - "website/**"
      - ".vscode/**"
      - "**.md"

env:
  CARGO_TERM_COLOR: always
  VERSION: 0.10.1

jobs:
  build-linux:
    runs-on: ubuntu-16.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Nightly Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: rustfmt
          override: true

      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest

      - uses: Swatinem/rust-cache@v1

      - name: Check Formatting
        run: |
          cargo fmt --all -- --check

      - name: Install dependencies and neovim
        run: |
          sudo apt-get upgrade -y && \
          sudo apt-get dist-upgrade -y && \
          sudo apt-get install build-essential software-properties-common -y && \
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y && \
          sudo apt-get update -y && \
          sudo apt-get install gcc-9 g++-9 -y && \
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 60 --slave /usr/bin/g++ g++ /usr/bin/g++-9 && \
          sudo update-alternatives --config gcc
          select gcc-9
          sudo update-alternatives --config g++
          select g++-9
          sudo apt-get -qq install -y \
            curl gnupg ca-certificates git cmake \
            libssl-dev pkg-config libfreetype6-dev libasound2-dev \
            libexpat1-dev libxcb-composite0-dev libbz2-dev freeglut3-dev \
            libxi-dev appstream \
            neovim

      - name: Test
        env:
          RUST_BACKTRACE: full
        run: |
          cargo nextest run --profile ci

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()
        with:
          files: target/nextest/ci/results.xml

      - name: Build Release
        run: |
          cargo build --release

      - name: Archive Linux artifact
        run: |
          cd ./target/release/
          strip neovide
          tar czvf neovide.tar.gz neovide

      - name: Create AppImage
        run: |
          curl -Lo linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20220822-1/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy
          ./linuxdeploy \
            --executable=target/release/neovide \
            --desktop-file=assets/neovide.desktop \
            --appdir=target/release/AppDir \
            --icon-file=assets/neovide.svg \
            --output=appimage

      - uses: actions/upload-artifact@v3
        with:
          name: neovide-linux
          path: |
            target/release/neovide.tar.gz
            Neovide_(nvim)-*.AppImage

